// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	protocol.proto

It has these top-level messages:
	MsgReq
	MsgResp
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgReq struct {
	Userid  int32  `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *MsgReq) Reset()                    { *m = MsgReq{} }
func (m *MsgReq) String() string            { return proto.CompactTextString(m) }
func (*MsgReq) ProtoMessage()               {}
func (*MsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgReq) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *MsgReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type MsgResp struct {
}

func (m *MsgResp) Reset()                    { *m = MsgResp{} }
func (m *MsgResp) String() string            { return proto.CompactTextString(m) }
func (*MsgResp) ProtoMessage()               {}
func (*MsgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*MsgReq)(nil), "MsgReq")
	proto.RegisterType((*MsgResp)(nil), "MsgResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MsgService service

type MsgServiceClient interface {
	Send(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error)
}

type msgServiceClient struct {
	cc *grpc.ClientConn
}

func NewMsgServiceClient(cc *grpc.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) Send(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*MsgResp, error) {
	out := new(MsgResp)
	err := grpc.Invoke(ctx, "/MsgService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MsgService service

type MsgServiceServer interface {
	Send(context.Context, *MsgReq) (*MsgResp, error)
}

func RegisterMsgServiceServer(s *grpc.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MsgService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).Send(ctx, req.(*MsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MsgService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x03, 0x33, 0x94, 0xac, 0xb8, 0xd8, 0x7c, 0x8b, 0xd3, 0x83, 0x52,
	0x0b, 0x85, 0xc4, 0xb8, 0xd8, 0x4a, 0x8b, 0x53, 0x8b, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x83, 0xa0, 0x3c, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0xfc, 0xbc, 0x92, 0xd4, 0xbc, 0x12, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x89, 0x93, 0x8b, 0x1d, 0xac, 0xb7, 0xb8, 0xc0,
	0x48, 0x93, 0x8b, 0xcb, 0xb7, 0x38, 0x3d, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48, 0x9a,
	0x8b, 0x25, 0x38, 0x35, 0x2f, 0x45, 0x88, 0x5d, 0x0f, 0x62, 0xb6, 0x14, 0x87, 0x1e, 0x54, 0xa1,
	0x12, 0x43, 0x12, 0x1b, 0xd8, 0x62, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x0b, 0x98,
	0x36, 0x8a, 0x00, 0x00, 0x00,
}
